Imports System.IO
Public Class frmMain

    Private TimeoutTime As Integer = 1 * 60 ' Default: 10 minutes, 60 seconds per min
    Private ProcessProperties As New ProcessStartInfo
    Private myProcess As Process
    Private percentCounter As Double = 0
    Private secondCounter As Double = 0
    Private Sub btnRun_Click(sender As Object, e As EventArgs) Handles btnRun.Click
        LogMessage("Started Running the program.")
        ToggleVisabilityAccessibility() ' assumed initalized by form design definition

        StartHaltTimer()
    End Sub

    Private Sub ToggleVisabilityAccessibility()
        txtFile.Enabled = Not txtFile.Enabled
        prgbarStatus.Visible = Not prgbarStatus.Visible
        btnRun.Enabled = Not btnRun.Enabled
        btnStop.Enabled = Not btnStop.Enabled

        lblTimerDisplay.Visible = Not lblTimerDisplay.Visible
        lblPercent.Visible = Not lblPercent.Visible

        txtHours.Enabled = Not txtHours.Enabled
        txtMinutes.Enabled = Not txtMinutes.Enabled
        txtSeconds.Enabled = Not txtSeconds.Enabled

        txtDelayHours.Enabled = Not txtDelayHours.Enabled
        txtDelayMinutes.Enabled = Not txtDelayMinutes.Enabled
        txtDelaySeconds.Enabled = Not txtDelaySeconds.Enabled


        ' Just reset these every time it toggles
        ResetValues()
    End Sub
    Private Sub timerTimeout_Tick(sender As Object, e As EventArgs) Handles timerTimeout.Tick
        'LogMessage("tock tick.")
        If prgbarStatus.Value < 100 Then
            secondCounter += 1
            percentCounter += 100 / TimeoutTime
            prgbarStatus.Value = percentCounter
            lblTimerDisplay.Text = getMinSecText(secondCounter) + " / " + getMinSecText(TimeoutTime)
            lblPercent.Text = (Math.Round(percentCounter, 2)).ToString() + " / 100% "

            prgbarStatus.Refresh()

            If myProcess.HasExited Then
                ' All done
                timerTimeout.Stop()
                startDelayTimer()
            End If
        Else
            If Not myProcess.HasExited Then
                killMyProcess(IsError:=True)
            End If
            timerTimeout.Stop()
            startDelayTimer()
        End If
    End Sub

    Private Sub killMyProcess(Optional ByVal IsError As Boolean = False)
        KillChildrenProcesses()
        Try
            myProcess.CloseMainWindow()
            If Not myProcess.HasExited Then myProcess.Kill()
        Catch ex As Exception
            ' Not sure if this has a chance to create errors so if so might as well log this
            IsError = True ' force this to be considered and error even if it wasn't origonally
        End Try

        If IsError Then
            LogMessage(IsError:=True, text:="Was unable to close a process that was generated by this program.")
            ' TODO:
            ' Send an email
        End If
    End Sub
    Private Function getMinSecText(seconds As Integer)
        ' Hours:Minutes:Seconds
        Return Math.Floor((seconds / 60 / 60)).ToString("00") + ":" + Math.Floor((seconds / 60)).ToString("00") + ":" + Math.Round(((seconds) Mod 60), 2).ToString("00")
    End Function

    Private Sub time_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtHours.KeyPress, txtMinutes.KeyPress, txtSeconds.KeyPress, txtDelayHours.KeyPress, txtDelayMinutes.KeyPress, txtDelaySeconds.KeyPress
        'Source: http://stackoverflow.com/questions/9969824/vb-net-need-text-box-to-only-accept-numbers
        '97 - 122 = Ascii codes for simple letters
        '65 - 90  = Ascii codes for capital letters
        '48 - 57  = Ascii codes for numbers

        If Asc(e.KeyChar) <> 8 Then
            If Asc(e.KeyChar) < 48 Or Asc(e.KeyChar) > 57 Then
                e.Handled = True
            End If
        End If
    End Sub

    Private Sub frmPilot_Closing(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing
        ' Display a MsgBox asking the user to save changes or abort.
        If Not IsNothing(myProcess) AndAlso Not myProcess.HasExited Then
            If MessageBox.Show("Are you sure? Closing this program will also attempt to force close """ + txtFile.Text + """ also.", "Are you sure?", MessageBoxButtons.YesNo) = DialogResult.No Then
                ' Cancel the Closing event from closing the form.
                e.Cancel = True
            Else
                killMyProcess(IsError:=False)
            End If
        End If
    End Sub

    Private Sub timerDelay_Tick(sender As Object, e As EventArgs) Handles timerDelay.Tick
        'LogMessage("tick tock.")
        If prgbarStatus.Value < 100 Then
            secondCounter += 1
            percentCounter += 100 / TimeoutTime
            prgbarStatus.Value = percentCounter
            lblTimerDisplay.Text = getMinSecText(secondCounter) + " / " + getMinSecText(TimeoutTime)
            lblPercent.Text = (Math.Round(percentCounter, 2)).ToString() + " / 100% "

            prgbarStatus.Refresh()
        Else
            timerDelay.Stop()
            StartHaltTimer()
        End If
    End Sub

    Private Sub StartHaltTimer()
        LogMessage("Begun running Program...")
        ResetValues()
        prgbarStatus.RightToLeftLayout = False
        prgbarStatus.RightToLeft = 0
        lblRunning.Visible = True
        lblWaiting.Visible = Not lblRunning.Visible

        ' Calculate the time
        TimeoutTime = (txtHours.Text * 60 * 60) + (txtMinutes.Text * 60) + (txtSeconds.Text)

        timerTimeout.Start() ' Start the timer

        ' Assign the process the file to use and execute
        Try
            ProcessProperties.FileName = txtFile.Text
            myProcess = Process.Start(ProcessProperties)
        Catch ex As Exception
            timerTimeout.Stop()
            MsgBox("An error has occured. Perhaps the filename and path are bad?")
            LogMessage(IsError:=True, text:="Could not run program. Exception: " + ex.Message.ToString())
            ToggleVisabilityAccessibility() ' assumed initalized by form design definition
        End Try
    End Sub
    Private Sub ResetValues()
        prgbarStatus.Value = 0
        percentCounter = 0
        secondCounter = 0
        lblPercent.Text = ""
        lblRunning.Visible = False
        lblWaiting.Visible = False
    End Sub
    Private Sub startDelayTimer()
        LogMessage("Begining wait timer...")

        ' Calculate the time
        TimeoutTime = (txtDelayHours.Text * 60 * 60) + (txtDelayMinutes.Text * 60) + (txtDelaySeconds.Text)

        ' Reset the values
        ResetValues()
        prgbarStatus.RightToLeftLayout = True
        prgbarStatus.RightToLeft = 1
        lblRunning.Visible = False
        lblWaiting.Visible = Not lblRunning.Visible

        timerDelay.Start() ' Start the timer
    End Sub


    Private Sub btnStop_Click(sender As Object, e As EventArgs) Handles btnStop.Click
        ToggleVisabilityAccessibility() ' make ready again for use
        timerDelay.Stop()
        timerTimeout.Stop()
        killMyProcess()
        LogMessage("Stopped Running the program.")
    End Sub



    ' TODO: add comments
    ' TODO: Organize methods properly
    ' TODO: Add exception handling and write exceptions to log
    ' TODO: Needs parent child testing (can test running itself)

    Sub KillChildrenProcesses()
        ' Source: https://social.msdn.microsoft.com/Forums/en-US/c95ba57e-f434-4cd3-a2dc-22c233be5a59/how-to-kill-a-process-from-vbnet?forum=vbgeneral
        For Each Process As Process In Process.GetProcessesByName(myProcess.ProcessName)
            Process.Kill()
        Next
    End Sub

    Shared Async Sub LogMessage(ByVal text As String, Optional ByVal IsError As Boolean = False)
        Dim type As String = "Event"

        If IsError Then
            type = "Error"
        End If

        ' Set the path to wherever this program is running for now
        Dim mydocpath As String = "" 'Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) & "\" ' Set a variable to the My Documents path.

        Dim strFile As String = mydocpath & String.Format("HaltingMachineLog_{0}.txt", DateTime.Today.ToString("dd-MMM-yyyy"))
        File.AppendAllText(strFile, String.Format("{0}=> [{1}][{2}]{3}", DateTime.Now, type, text, Environment.NewLine))

    End Sub

End Class
